{"version":3,"sources":["books.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;YAOA;gBACC,YAAoB,IAAU;oBAAV,SAAI,GAAJ,IAAI,CAAM;oBAEtB,YAAO,GAAG,aAAa,CAAC,CAAC,cAAc;gBAFb,CAAC;gBAInC,8BAA8B;gBAC9B,MAAM;oBACL,IAAI,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC;oBAEvB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC;yBACvB,GAAG,CAAC,QAAQ,IAAI,QAAQ,CAAC,IAAI,EAAE,CAAC;yBAChC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBAC3B,CAAC;gBAEF,uFAAuF;gBACtF,GAAG,CAAC,EAAU;oBACd,2DAA2D;oBAC1D,IAAI,GAAG,GAAG,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;oBAE7B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC;yBACvB,GAAG,CAAC,GAAG,IAAU,GAAG,CAAC,IAAI,EAAE,CAAC;yBAG5B,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBAC3B,CAAC;gBAEO,WAAW,CAAC,KAAe;oBAClC,gCAAgC;oBAChC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;oBACrB,MAAM,CAAC,uBAAU,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,IAAI,cAAc,CAAC,CAAC;gBAC/D,CAAC;YACD,CAAC;YAhCD;gBAAC,iBAAU,EAAE;;4BAAA;YACb,uCA+BC,CAAA","file":"../books.service.js","sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Http, Response } from \"@angular/http\";\r\nimport { Observable } from \"rxjs/Observable\";\r\n\r\nimport { Book } from \"./book\";\r\n\r\n@Injectable()\r\nexport class BooksService {\r\n\tconstructor(private http: Http) { }\r\n\t\r\n\tprivate baseUrl = \"/api/Books/\"; // web api URL\r\n\r\n\t// calls the [GET] /api/Books.\r\n\tgetAll() {\r\n\t\tvar url = this.baseUrl;\t\r\n\t\t\r\n\t\treturn this.http.get(url)\r\n\t\t\t.map(response => response.json())\r\n\t\t\t.catch(this.handleError);\r\n\t}\r\n\t\r\n// calls the [GET] /api/Books/id Web API method to retrieve the item with the given id.\r\n\tget(id: number) {\r\n\t//if (id == null) { throw new Error(\"id is required.\"); }\t\t\r\n\t\tvar url = this.baseUrl + id;\r\n\r\n\treturn this.http.get(url)\r\n\t\t.map(res => <Book>res.json())\r\n\t\t//.map(res => res.json())\r\n\t//\t.map(response => response.json())\r\n\t\t.catch(this.handleError);\r\n}\r\n\r\nprivate handleError(error: Response) {\r\n\t// output errors to the console.\r\n\tconsole.error(error);\r\n\treturn Observable.throw(error.json().error || \"Server error\");\r\n}\r\n}"]}